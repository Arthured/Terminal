qq3=melt(q3, var='Negative')
qq1['Score'] = NULL
qq2['Positive'] = NULL
qq3['Negative'] = NULL
#Creating data frame
table1 = data.frame(Text=result[[1]]$text, Score=qq1)
table2 = data.frame(Text=result[[2]]$text, Score=qq2)
table3 = data.frame(Text=result[[3]]$text, Score=qq3)
#Merging three data frames into one
table_final=data.frame(Text=table1$Text, Positive=table2$value, Negative=table3$value, Score=table1$value)
return(table_final)
}
percentage<-function(table_final)
{
#Positive Percentage
#Renaming
posSc=table_final$Positive
negSc=table_final$Negative
#Adding column
table_final$PosPercent = posSc/ (posSc+negSc)
#Replacing Nan with zero
pp = table_final$PosPercent
pp[is.nan(pp)] <- 0
table_final$PosPercent = pp*100
#Negative Percentage
#Adding column
table_final$NegPercent = negSc/ (posSc+negSc)
#Replacing Nan with zero
nn = table_final$NegPercent
nn[is.nan(nn)] <- 0
table_final$NegPercent = nn*100
return(table_final)
}
wordDatabase()
twtList<-reactive({twtList<-searchTwitter(input$searchTerm, n=input$maxTweets, lang="en") })
tweets<-reactive({tweets<-TweetFrame(twtList() )})
result<-reactive({result<-score.sentiment(tweets(), pos.words, neg.words, .progress='none')})
table_final<-reactive({table_final<-sentimentAnalyser(  result() )})
table_final_percentage<-reactive({table_final_percentage<-percentage(  table_final() )})
output$tabledata<-renderTable(table_final_percentage())
#WORDCLOUD
wordclouds<-function(text)
{
library(tm)
library(wordcloud)
corpus <- VCorpus(VectorSource(text)) #Fixed Corpus Transformation issue
#clean text
clean_text <- tm_map(corpus, removePunctuation)
#clean_text <- tm_map(clean_text, content_transformation)
clean_text <- tm_map(clean_text, content_transformer(tolower))
clean_text <- tm_map(clean_text, removeWords, stopwords("english"))
clean_text <- tm_map(clean_text, removeNumbers)
clean_text <- tm_map(clean_text, stripWhitespace)
return (clean_text)
}
text_word<-reactive({text_word<-wordclouds( tweets() )})
output$word <- renderPlot({ wordcloud(text_word(),random.order=F,max.words=80, col=rainbow(100), main="WordCloud", scale=c(4.5, 1)) })
#HISTOGRAM
output$histPos<- renderPlot({ hist(table_final()$Positive, col=rainbow(10), main="Histogram of Positive Sentiment", xlab = "Positive Score") })
output$histNeg<- renderPlot({ hist(table_final()$Negative, col=rainbow(10), main="Histogram of Negative Sentiment", xlab = "Negative Score") })
output$histScore<- renderPlot({ hist(table_final()$Score, col=rainbow(10), main="Histogram of Score Sentiment", xlab = "Overall Score") })
#Pie
slices <- reactive ({ slices <- c(sum(table_final()$Positive), sum(table_final()$Negative)) })
labels <- c("Positive", "Negative")
library(plotrix)
output$piechart <- renderPlot({ pie3D(slices(), labels = labels, col=rainbow(length(labels)),explode=0.00, main="Sentiment Analysis") })
#TOP TRENDING TOPICS
toptrends <- function(place)
{
a_trends = availableTrendLocations()
woeid = a_trends[which(a_trends$name==place),3]
trend = getTrends(woeid)
trends = trend[1:2]
dat <- cbind(trends$name)
dat2 <- unlist(strsplit(dat, split=", "))
dat3 <- grep("dat2", iconv(dat2, "latin1", "ASCII", sub="dat2"))
dat4 <- dat2[-dat3]
return (dat4)
}
trend_table<-reactive({ trend_table<-toptrends(input$trendingTable) })
output$trendtable <- renderTable(trend_table())
#TOP CHARTS
# Top charts of a particular hashtag - Barplot
toptweeters<-function(tweetlist)
{
tweets <- twListToDF(tweetlist)
tweets <- unique(tweets)
# Make a table for the number of tweets per user
d <- as.data.frame(table(tweets$screenName))
d <- d[order(d$Freq, decreasing=T), ] #descending order of top charts according to frequency of tweets
names(d) <- c("User","Tweets")
return (d)
}
# Plot the table above for the top 20 charts
d<-reactive({d<-toptweeters(  twtList() ) })
output$tweetersplot<-renderPlot ( barplot(head(d()$Tweets, 20), names=head(d()$User, 20), horiz=F, las=2, main="Top 20 users associated with the Hashtag", col=1) )
output$tweeterstable<-renderTable(head(d(),20))
#TOP HASHTAGS OF USER
tw1 <- reactive({ tw1 = userTimeline(input$user, n = 3200) })
tw <- reactive({ tw = twListToDF(tw1()) })
vec1<-reactive ({ vec1 = tw()$text })
extract.hashes = function(vec){
hash.pattern = "#[[:alpha:]]+"
have.hash = grep(x = vec, pattern = hash.pattern)
hash.matches = gregexpr(pattern = hash.pattern,
text = vec[have.hash])
extracted.hash = regmatches(x = vec[have.hash], m = hash.matches)
df = data.frame(table(tolower(unlist(extracted.hash))))
colnames(df) = c("tag","freq")
df = df[order(df$freq,decreasing = TRUE),]
return(df)
}
dat<-reactive({ dat = head(extract.hashes(vec1()),50) })
dat2<- reactive ({ dat2 = transform(dat(),tag = reorder(tag,freq)) })
p<- reactive ({ p = ggplot(dat2(), aes(x = tag, y = freq)) + geom_bar(stat="identity", fill = "blue")
p + coord_flip() + labs(title = "Hashtag frequencies in the tweets of the Twitter User") })
output$tophashtagsplot <- renderPlot ({ p() })
}) #shiny server
shinyApp(shinyUI,shinyServer)
library(shiny)
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
Trasplantes <- read.csv("C://Users//artur//Downloads//Trasplantes.csv")
ui <- fluidPage(
titlePanel("Trasplantes de Órganos y Tejidos (2007 - 2020)"),
navbarPage(
tabsetPanel(
tabPanel("DATOS",DT::dataTableOutput("tabla")),
tabPanel("RESUMEN",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE)),
verbatimTextOutput("Resumen")),
tabPanel("TRASPLANTES",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Total")),
tabPanel("ÓRGANOS",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Organos")),
tabPanel("TIPO DE TRASPLANTE",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Tipo"))
)
)
)
server <- function(input, output) {
TrasplantesSub <- reactive({ Trasplantes %>%
filter(ENTIDAD %in% input$Entidades)
})
output$tabla <- DT::renderDataTable(DT::datatable({Trasplantes},
options=list(lengthMenu=list(c(5,10,100),c("5","10","100"))
), filter = "top", selection = "multiple", style = "bootstrap"
))
output$Resumen <- renderPrint({summary(TrasplantesSub())})
fecha <- as.Date(Trasplantes$FECHATRASPLANTE,format="%d/%m/%Y")
output$Total<-renderPlot ({TrasplantesSub() %>%
ggplot(Trasplantes, aes(fecha, fill = group)) +
geom_histogram(alpha = 0.5, position = "identity")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Trasplantes de Órganos y Tejidos (2007 - 2020)"),
navbarPage(
tabsetPanel(
tabPanel("DATOS",DT::dataTableOutput("tabla")),
tabPanel("RESUMEN",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE)),
verbatimTextOutput("Resumen")),
tabPanel("TRASPLANTES",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Total")),
tabPanel("ÓRGANOS",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Organos")),
tabPanel("TIPO DE TRASPLANTE",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Tipo"))
)
)
)
library(dplyr)
library(lubridate)
ui <- fluidPage(
titlePanel("Trasplantes de Órganos y Tejidos (2007 - 2020)"),
navbarPage(
tabsetPanel(
tabPanel("DATOS",DT::dataTableOutput("tabla")),
tabPanel("RESUMEN",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE)),
verbatimTextOutput("Resumen")),
tabPanel("TRASPLANTES",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Total")),
tabPanel("ÓRGANOS",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Organos")),
tabPanel("TIPO DE TRASPLANTE",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Tipo"))
)
)
)
install.packages("DT")
library(DT)
ui <- fluidPage(
titlePanel("Trasplantes de Órganos y Tejidos (2007 - 2020)"),
navbarPage(
tabsetPanel(
tabPanel("DATOS",DT::dataTableOutput("tabla")),
tabPanel("RESUMEN",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE)),
verbatimTextOutput("Resumen")),
tabPanel("TRASPLANTES",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Total")),
tabPanel("ÓRGANOS",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Organos")),
tabPanel("TIPO DE TRASPLANTE",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Tipo"))
)
)
)
server <- function(input, output) {
TrasplantesSub <- reactive({ Trasplantes %>%
filter(ENTIDAD %in% input$Entidades)
})
output$tabla <- DT::renderDataTable(DT::datatable({Trasplantes},
options=list(lengthMenu=list(c(5,10,100),c("5","10","100"))
), filter = "top", selection = "multiple", style = "bootstrap"
))
output$Resumen <- renderPrint({summary(TrasplantesSub())})
fecha <- as.Date(Trasplantes$FECHATRASPLANTE,format="%d/%m/%Y")
output$Total<-renderPlot ({TrasplantesSub() %>%
ggplot(Trasplantes, aes(fecha, fill = group)) +
geom_histogram(alpha = 0.5, position = "identity")
})
}
shinyApp(ui = ui, server = server)
setwd("C:/Users/artur/OneDrive/Documentos/uni/7mo/Terminal/shiny")
library(shiny)
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
Trasplantes <- read.csv("C://Users//artur//Downloads//Trasplantes.csv")
ui <- fluidPage(
titlePanel("Trasplantes de Órganos y Tejidos (2007 - 2020)"),
navbarPage(
tabsetPanel(
tabPanel("DATOS",DT::dataTableOutput("tabla")),
tabPanel("RESUMEN",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE)),
verbatimTextOutput("Resumen")),
tabPanel("TRASPLANTES",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Total")),
tabPanel("ÓRGANOS",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Organos")),
tabPanel("TIPO DE TRASPLANTE",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Tipo"))
)
)
)
server <- function(input, output) {
TrasplantesSub <- reactive({ Trasplantes %>%
filter(ENTIDAD %in% input$Entidades)
})
output$tabla <- DT::renderDataTable(DT::datatable({Trasplantes},
options=list(lengthMenu=list(c(5,10,100),c("5","10","100"))
), filter = "top", selection = "multiple", style = "bootstrap"
))
output$Resumen <- renderPrint({summary(TrasplantesSub())})
fecha <- as.Date(Trasplantes$FECHATRASPLANTE,format="%d/%m/%Y")
output$Total<-renderPlot ({TrasplantesSub() %>%
ggplot(Trasplantes, aes(fecha, fill = group)) +
geom_histogram(alpha = 0.5, position = "identity")
})
}
shinyApp(ui = ui, server = server)
pokemones <- read.csv("https://raw.githubusercontent.com/Arthured/r-basic/master/data/Pokemon.csv")
View(pokemones)
ui <- fluidPage(
titlePanel("Pokedex de la 1ra a la 7ma generacion"),
navbarPage(
tabsetPanel(
tabPanel("DATOS",DT::dataTableOutput("tabla")),
tabPanel("RESUMEN",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE)),
verbatimTextOutput("Resumen")),
tabPanel("TRASPLANTES",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Total")),
tabPanel("ÓRGANOS",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Organos")),
tabPanel("TIPO DE TRASPLANTE",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Tipo"))
)
)
)
library(shiny)
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
Trasplantes <- read.csv("C://Users//artur//Downloads//Trasplantes.csv")
ui <- fluidPage(
titlePanel("Pokedex de la 1ra a la 7ma generacion"),
navbarPage(
tabsetPanel(
tabPanel("DATOS",DT::dataTableOutput("tabla")),
tabPanel("RESUMEN",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE)),
verbatimTextOutput("Resumen")),
tabPanel("TRASPLANTES",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Total")),
tabPanel("ÓRGANOS",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Organos")),
tabPanel("TIPO DE TRASPLANTE",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 2007,
max = 2020, value = c(2007, 2020))),
plotOutput("Tipo"))
)
)
)
server <- function(input, output) {
TrasplantesSub <- reactive({ Trasplantes %>%
filter(ENTIDAD %in% input$Entidades)
})
output$tabla <- DT::renderDataTable(DT::datatable({Trasplantes},
options=list(lengthMenu=list(c(5,10,100),c("5","10","100"))
), filter = "top", selection = "multiple", style = "bootstrap"
))
output$Resumen <- renderPrint({summary(TrasplantesSub())})
fecha <- as.Date(Trasplantes$FECHATRASPLANTE,format="%d/%m/%Y")
output$Total<-renderPlot ({TrasplantesSub() %>%
ggplot(Trasplantes, aes(fecha, fill = group)) +
geom_histogram(alpha = 0.5, position = "identity")
})
}
shinyApp(ui = ui, server = server)
max(pokemones$Attack)
library(shiny)
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
pokemones <- read.csv("https://raw.githubusercontent.com/Arthured/r-basic/master/data/Pokemon.csv")
ui <- fluidPage(
titlePanel("Pokedex de la 1ra a la 7ma generacion"),
navbarPage(
tabsetPanel(
tabPanel("DATOS",DT::dataTableOutput("tabla")),
tabPanel("RESUMEN",
sidebarPanel(
selectizeInput("Pokemon",label = h4("Seleccionar entidades"),
choices = pokemones$Generation, multiple=TRUE)),
verbatimTextOutput("Resumen")),
tabPanel("Ataque",
sidebarPanel(
selectizeInput("Entidades",label = h4("Seleccionar entidades"),
choices = pokemones, multiple=TRUE),
sliderInput( "ylms", label = h4("Mejor ataque"), min = 0,
max = 190, value = c(0, 200))),
plotOutput("Total")),
tabPanel("Defensa",
sidebarPanel(
selectizeInput("Defensa",label = h4("Seleccione generacion"),
choices = Trasplantes$ENTIDAD, multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 0,
max = 230, value = c(0, 250))),
plotOutput("Organos")),
tabPanel("Ataque especial",
sidebarPanel(
selectizeInput("pokemones",label = h4("Seleccionar generacion"),
choices = pokemones$Sp_Atk , multiple=TRUE),
sliderInput( "ylms", label = h4("Años contemplados"), min = 0,
max = 200, value = c(0, 200))),
plotOutput("Tipo"))
)
)
)
server <- function(input, output) {
PokemonSub <- reactive({ pokemones %>%
filter(Generation %in% input$Generation)
})
output$tabla <- DT::renderDataTable(DT::datatable({pokemones},
options=list(lengthMenu=list(c(5,10,100),c("5","10","100"))
), filter = "top", selection = "multiple", style = "bootstrap"
))
output$Resumen <- renderPrint({summary(PokemonSub())})
fecha <- as.Date(pokemones$Total,format="%d/%m/%Y")
output$Total<-renderPlot ({PokemonSub() %>%
ggplot(pokemones, aes(fecha, fill = group)) +
geom_histogram(alpha = 0.5, position = "identity")
})
}
shinyApp(ui = ui, server = server)
runApp('Proyecto.R')
runApp('Proyecto.R')
runApp('Proyecto.R')
PokemonSub <- reactive({ pokemones %>%
summary(PokemonSub)
max(pokemones$Attack)
PokemonSub <- reactive({ pokemones %>%
runApp('Proyecto.R')
x=1
